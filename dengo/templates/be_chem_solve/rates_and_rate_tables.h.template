/*

The generalized rate data type holders.

*/
{% block includes %}

/* stdlib, hdf5, local includes */

#include "time.h"
#include "sys/time.h"
#include "stdlib.h"
#include "math.h"
#include "hdf5.h"
#include "hdf5_hl.h"
#include "stdio.h"
#include "string.h"
#include <omp.h>

#define NTHREADS 40
#define MAX_NCELLS 256
#define NSPECIES {{network.required_species | length}}
#define DMAX(A,B) ((A) > (B) ? (A) : (B))
#define DMIN(A,B) ((A) < (B) ? (A) : (B))

{% endblock %} {# includes #}

int {{solver_name}}_main(int argc, char **argv);

{% block data_structs_for_rates %}

typedef struct {{solver_name}}_data {
    /* All of the network bins will be the same width */
    double dbin;
    double idbin;
    double bounds[2];
    int nbins;

    /* These will be for bins in redshift space */
    double d_zbin;
    double id_zbin;
    double z_bounds[2];
    int n_zbins;

    /* For storing and passing around
       redshift information */
    double current_z;
    double zdef;
    double dz;

    double Ts[NTHREADS][MAX_NCELLS];
    double Tdef[NTHREADS][MAX_NCELLS]; /* t1, t2, tdef */
    double dT[NTHREADS][MAX_NCELLS]; /* t1, t2, tdef */
    double logTs[NTHREADS][MAX_NCELLS];
    double invTs[NTHREADS][MAX_NCELLS];
    double dTs_{{ network.energy_term.name }}[NTHREADS][MAX_NCELLS];

    /* Now we do all of our cooling and chemical tables */
    {%- for name, rate in network.reactions | dictsort %}
    {% if 'pi' not in name -%}
    double r_{{name}}[{{ network.T | length }}];
    double rs_{{name}}[NTHREADS][MAX_NCELLS];
    double drs_{{name}}[NTHREADS][MAX_NCELLS];
    {%- else -%}
    double r_{{name}}[{{ network.z | length }}];
    double rs_{{name}}[NTHREADS][MAX_NCELLS];
    double drs_{{name}}[NTHREADS][MAX_NCELLS];
    {%- endif %}
    {%- if rate.tables is defined %}
    {%- for name2 in rate.tables | sort %}
    double r_{{name}}_{{name2}}[MAX_NCELLS];
    double rs_{{name}}_{{name2}}[NTHREADS][MAX_NCELLS];
    double drs_{{name}}_{{name2}}[NTHREADS][MAX_NCELLS];
    {%- endfor %}
    {%- endif %}
    {% endfor %}

    {%- for name, rate in network.cooling_actions | dictsort %}
    {%- for name2 in rate.tables | sort %}
    {% if 'ph' not in name -%}
    double c_{{name}}_{{name2}}[{{ network.T | length }}];
    double cs_{{name}}_{{name2}}[NTHREADS][MAX_NCELLS];
    double dcs_{{name}}_{{name2}}[NTHREADS][MAX_NCELLS];
    {%- else -%}
    double c_{{name}}_{{name2}}[{{ network.z | length }}];
    double cs_{{name}}_{{name2}}[NTHREADS][MAX_NCELLS];
    double dcs_{{name}}_{{name2}}[NTHREADS][MAX_NCELLS];
    {%- endif %}
    {%- endfor %}
    {% endfor %}
    int bin_id[NTHREADS][MAX_NCELLS];
    int ncells;
    


    // gamma as a function of temperature
    {%- for sp in network.interpolate_gamma_species_name | sort %}
    double g_gamma{{sp}}[{{network.T | length}}];
    double g_dgamma{{sp}}_dT[{{network.T | length}}];

    // store the gamma for that particular step
    double gamma{{sp}}[NTHREADS][MAX_NCELLS];
    double dgamma{{sp}}_dT[NTHREADS][MAX_NCELLS];
    
    // store 1 / (gamma - 1)
    double _gamma{{sp}}_m1[NTHREADS][MAX_NCELLS];
    {% endfor %}

    double scale[NTHREADS][{{network.required_species | length}} * MAX_NCELLS ];
    double inv_scale[NTHREADS][{{network.required_species | length}} * MAX_NCELLS];
    

    int nstrip;
    double mdensity[NTHREADS][MAX_NCELLS];
    double inv_mdensity[NTHREADS][MAX_NCELLS];

    {% if "cie_cooling" in network.cooling_actions %}
    double cie_optical_depth_approx[NTHREADS][MAX_NCELLS];
    {% endif %}
    {% if "gloverabel08" in network.cooling_actions %}
    double h2_optical_depth_approx[NTHREADS][MAX_NCELLS];
    {% endif %}
    
    const char *dengo_data_file;
    
    double reltol;
    double floor_value;
} {{ solver_name }}_data;
{{solver_name}}_data *{{solver_name}}_setup_data(const char *, int *, char***);
void {{ solver_name }}_read_rate_tables({{solver_name}}_data*);
void {{ solver_name }}_read_cooling_tables({{solver_name}}_data*);
void {{ solver_name }}_read_gamma({{solver_name}}_data*);
int dengo_evolve_{{solver_name}} (double dtf, double &dt, double z,
                                     double *input, double *rtol,
                                     double *atol, long long dims,
                                     {{solver_name}}_data *data);
{% endblock %} {# data_struct_for_rates #}

typedef struct code_units
{

  int comoving_coordinates;
  double density_units;
  double length_units;
  double time_units;
  double velocity_units;
  double a_units;
  double a_value;

} code_units;


typedef struct dengo_field_data
{

  unsigned long int nstrip;
  unsigned long int ncells; 
  // let's just pass them passively through field_data
  double reltol;
  double floor_value;
  // This should be updated dynamically 
  // with dengo
  double *density;
  
  {%- for species in network.required_species | sort %}
  double *{{species.name}}_density;
  {%- endfor %}
    
  double *CoolingTime;
  double *MolecularWeight;
  double *temperature;
  double *Gamma;
  double *Pressure;

  int *grid_start;
  int *grid_end;
  int *grid_dimension;

  const char *dengo_data_file;
  code_units *units;
} dengo_field_data;

// Enzo interface
int dengo_estimate_cooling_time_enzo( code_units* units, dengo_field_data *field_data );

int {{solver_name}}_solve_chemistry_enzo( code_units *units, dengo_field_data *field_data, double dt );
int reshape_to_dengo_field_data_enzo( code_units* units, dengo_field_data *field_data, double* input, double *temp );
int flatten_dengo_field_data_enzo( code_units* units, dengo_field_data *field_data, double *input );

typedef int(*rhs_f)(double *, double *, int, int, void *);
typedef int(*jac_f)(double *, double *, int, int, void *);
int BE_chem_solve(rhs_f f, jac_f J, double *u, double dt, double *rtol, 
                  double *atol, int nstrip, int nchem, double *scaling, void *sdata,
                  double *, double *, double *, double *);

{% block function_declarations %}

int calculate_jacobian_{{solver_name}}(double *input, double *Joutput,
        int nstrip, int nchem, void *sdata);
int calculate_rhs_{{solver_name}}(double *input, double *rhs, int nstrip,
                  int nchem, void *sdata);
void ensure_electron_consistency(double *input, long long nstrip, int nchem);
void temperature_from_mass_density(double *input, int nstrip, int nchem, 
                                   double *strip_temperature);
void setting_up_extra_variables( {{solver_name}}_data * data, double * input, int nstrip );
    
{% endblock %} {# function_declarations #}


int {{solver_name}}_calculate_cooling_timescale( double *cooling_time, double *input, int nstrip, {{solver_name}}_data *data);

int dengo_estimate_cooling_time_enzo( code_units* units, dengo_field_data *field_data );

int calculate_equilibrium_abundance( {{solver_name}}_data *data, double *input, 
    int nstrip, unsigned long d, unsigned long dims, double *equil_array);
