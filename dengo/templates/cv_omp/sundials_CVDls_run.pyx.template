#cython: language_level=3
cimport numpy as np
import numpy as np
import time
from libc.stdlib cimport malloc, free
from libcpp cimport bool
from cpython cimport array

# NSPECIES here is N in the .C.template file
DEF NSPECIES = {{network.required_species | length}}
DEF MAX_NCELLS=1

cdef extern from "{{solver_name}}_solver.h":
    cdef int _MAX_NCELLS  "MAX_NCELLS"
    cdef int _NSPECIES "NSPECIES"

    ctypedef struct dengo_field_data:
        unsigned long int nstrip;
        unsigned long int ncells;
        {%- for species in network.required_species | sort %}
        double *{{species.name}}_density;
        {%- endfor %}
        double *density;
        double *CoolingTime;
        double *MolecularWeight;
        double *temperature;
        double *Gamma;
        double reltol;
        double floor_value;
        const char *dengo_data_file;
        int *grid_start;
        int *grid_end;
        int *grid_dimension;

    ctypedef struct code_units:
        int comoving_coordinates
        double density_units
        double length_units
        double time_units
        double velocity_units
        double a_units
        double a_value


    ctypedef struct {{solver_name}}_data:
        double dbin
        double idbin
        double bounds[2]
        int nbins

        double d_zbin
        double id_zbin
        double z_bounds[2]
        int n_zbins

        double current_z
        double zdef
        double dz

        double Ts[MAX_NCELLS]
        double Tdef[MAX_NCELLS]
        double dT[MAX_NCELLS]
        double logTs[MAX_NCELLS]
        double dTs_{{ network.energy_term.name }}[MAX_NCELLS]
        {%- for name, rate in network.reactions | dictsort %}
        double r_{{name}}[{{ network.T | length }}]
        double rs_{{name}}[MAX_NCELLS]
        double drs_{{name}}[MAX_NCELLS]
        {%- endfor %}
        {%- for name, rate in network.cooling_actions | dictsort %}
        {%- for name2 in rate.tables | sort %}
        double c_{{name}}_{{name2}}[{{ network.T | length }}]
        double cs_{{name}}_{{name2}}[MAX_NCELLS]
        double dcs_{{name}}_{{name2}}[MAX_NCELLS]
        {%- endfor %}
        {% endfor %}
        int bin_id[MAX_NCELLS]
        int ncells

    double dengo_evolve_{{solver_name}} (double dtf, double &dt, double z,
                                         double *input, double *rtol,
                                         double *atol, int dims,
                                         {{solver_name}}_data *data, double *temp)
    int {{solver_name}}_solve_chemistry_dt( code_units *units, dengo_field_data *field_data, double* rtol, double* atol, double dt)
    int {{solver_name}}_solve_chemistry( code_units *units, dengo_field_data *field_data, double dt );
    int {{solver_name}}_solve_chemistry_enzo( code_units *units, dengo_field_data *field_data, double dt );
    int {{solver_name}}_main(int argc, char **argv);



def main_run_{{solver_name}}():
    t1 = time.time()
    {{solver_name}}_main(0, NULL)
    t2 = time.time()
    print("Total elapsed time: %0.3e" % (t2-t1))

def run_{{solver_name}}(ics, double tf, int niter = 10000,
                        int intermediate = 1, float z = -1.0, bool adaptive_step = True,
			float reltol = 1.0e-5, float floor_value = 1.0e-20):
    #assert(_MAX_NCELLS == MAX_NCELLS)
    assert(_NSPECIES == NSPECIES)
    {%- for s in network.required_species | sort %}
    cdef np.ndarray[np.float64_t, ndim=1] {{s.name}}_arr = ics["{{s.name}}"]
    if not {{s.name}}_arr.flags['C_CONTIGUOUS']:
        {{s.name}}_arr = np.ascontiguousarray( {{s.name}}_arr )
    cdef double[::1] {{s.name}}_memview = {{s.name}}_arr
    cdef np.ndarray[np.float64_t, ndim=2] {{s.name}}_int
    {%- endfor %}
    cdef np.ndarray[np.float64_t, ndim=1] CoolingTime;
    cdef np.ndarray[np.float64_t, ndim=1] Gamma;
    cdef np.ndarray[np.float64_t, ndim=1] Temperature;
    cdef np.ndarray[np.float64_t, ndim=1] MolecularWeight;

    cdef np.ndarray[np.float64_t, ndim=2] CoolingTime_int;
    cdef np.ndarray[np.float64_t, ndim=2] Gamma_int;
    cdef np.ndarray[np.float64_t, ndim=2] Temperature_int;
    cdef np.ndarray[np.float64_t, ndim=2] MolecularWeight_int;

    cdef np.ndarray[np.float64_t, ndim=1] result_int
    cdef np.ndarray[np.float64_t, ndim=2] temp_int
    cdef np.ndarray[np.float64_t, ndim=1] t_int
    cdef np.ndarray[np.float64_t, ndim=1] dt_int

    cdef int i, j, k, iter
    cdef int dims = {{network.energy_term.name}}_arr.shape[0]
    cdef int NTOT = NSPECIES * dims

    cdef dengo_field_data *field_data = <dengo_field_data *> malloc(sizeof(dengo_field_data));
    cdef code_units       * units     = <code_units *> malloc(sizeof(code_units));
    units.density_units = 1.67e-24;
    units.length_units  = 1.0;
    units.time_units    = 1.0;
    units.velocity_units = 1.0;
    CoolingTime = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    Gamma       = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    Temperature = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    MolecularWeight = np.ascontiguousarray(np.zeros((dims), dtype=np.double))
    cdef double[::1] ctime_memview = CoolingTime
    cdef double[::1] gamma_memview = Gamma
    cdef double[::1] temp_memview  = Temperature
    cdef double[::1] mweight_memview = MolecularWeight
    {%- for species in network.required_species | sort %}
    field_data.{{species.name}}_density = &{{species.name}}_memview[0];
    {%- endfor %}
    field_data.CoolingTime = &ctime_memview[0]
    field_data.Gamma       = &gamma_memview[0]
    field_data.temperature = &temp_memview[0]
    field_data.MolecularWeight = &mweight_memview[0]
    field_data.ncells  = dims;

    cdef np.ndarray[np.float64_t, ndim=1] atol = np.ones( (NTOT) )*floor_value*reltol
    cdef np.ndarray[np.float64_t, ndim=1] rtol = np.array([reltol])

    if intermediate == 1:
        # allocate memory for the intermediate results
        {%- for s in network.required_species | sort %}
        {{s.name}}_int = np.zeros((dims, niter), "float64")
        {%- endfor %}
        CoolingTime_int = np.zeros((dims, niter), "float64")
        Gamma_int       = np.zeros((dims, niter), "float64")
        Temperature_int = np.zeros((dims, niter), "float64")
        MolecularWeight_int = np.zeros((dims, niter), "float64")

        temp_int = np.zeros((dims, niter), "float64")
        result_int = np.zeros(niter, "float64")
        t_int = np.zeros(niter, "float64")
        dt_int = np.zeros(niter, "float64")

    cdef double ttot = 0.0
    cdef int status
    # Allocate some temporary data
    # Now we manually evolve
    #ttot = dengo_evolve_{{solver_name}}(tf, dt, input, rtol, atol, dims, data)
    cdef double *t_now = <double *> malloc( sizeof(double) )
    cdef double *dt_arr = <double *> malloc(sizeof(double) * dims * niter)
    cdef double *success_arr = <double *> malloc(sizeof(double) * dims * niter)
    cdef double *ttot_arr = <double *> malloc(sizeof(double) * dims * niter)
    cdef double *temp = <double *> malloc(sizeof(double) * niter)


    cdef int    *grid_dimension = <int *> malloc(sizeof(int)*3)
    cdef int    *grid_start     = <int *> malloc(sizeof(int)*3)
    cdef int    *grid_end       = <int *> malloc(sizeof(int)*3)


    grid_dimension[0] = dims;
    grid_start[0]     = 0
    grid_end  [0]     = dims-1;

    grid_dimension[1] = 1;
    grid_start[1]     = 0
    grid_end  [1]     = 0;

    grid_dimension[2] = 1;
    grid_start[2]     = 0
    grid_end  [2]     = 0;

    field_data.grid_dimension = grid_dimension
    field_data.grid_start     = grid_start
    field_data.grid_end       = grid_end


    cdef int niter_cvodes = niter
    cdef double dt  = tf / float(niter)
    field_data.dengo_data_file = "{{solver_name}}_tables.h5"

    field_data.reltol = reltol;
    field_data.floor_value = floor_value;

    cdef int Enzo_Success = 1;
    cdef int Enzo_Fail    = 0;
    for iter in range(niter):
        status = {{solver_name}}_solve_chemistry_enzo( units, field_data, dt);
        j = 0;

        for i in range(dims):
            {%- for s in network.required_species | sort %}
            {{s.name}}_int[i, iter] = field_data.{{s.name}}_density[i]
            j += 1
            {%- endfor %}
            temp_int[ i, iter ] = field_data.temperature[i]

        if status == Enzo_Success:
            result_int[iter] = 1
            ttot += dt
        elif status == Enzo_Fail:
            result_int[iter] = 0

        t_int[iter] = ttot
        dt_int[iter] = dt

        if status == Enzo_Success:
            if iter % 100 == 0:
                print("Successful iteration[% 5i]: (%0.3e) %0.3e / %0.3e" % (iter, dt, ttot, tf))

            if adaptive_step:
                 dt *= 1.1

            if tf - ttot < dt:
                dt = tf - ttot
        elif status == Enzo_Fail:
            dt /= 2.0;
            # copy_array(prev, input, NTOT)
            # Reset the scaling array to match the new values
            # copy_array(input, scale, NTOT)
            if dt < 1e-20 * tf:
                print("dt too small (%0.3e / %0.3e) so breaking" % (dt, tf))
                break
            continue
        if ttot >= tf: break

    free(t_now)
    free(temp)
    free(dt_arr)
    free(ttot_arr)
    free(success_arr)
    free(field_data)
    free(units)

    print("End in %s iterations: %0.5e / %0.5e (%0.5e)" % (iter + 1, ttot, tf, tf - ttot))

    rv, rv_t = {}, {}
    {%- for s in network.required_species | sort %}
    {{s.name}}_arr = rv["{{s.name}}"] = np.zeros(dims, "float64")
    {%- endfor %}
    if intermediate:
        {%- for s in network.required_species | sort %}
        rv_t["{{s.name}}"] = {{s.name}}_int[:,:iter+1]
        {%- endfor %}
        rv_t["successful"] = result_int.astype("bool")[:iter+1]
        rv_t['T'] = temp_int[:,:iter+1]
        rv_t['t'] = t_int[:iter+1]
        rv_t['dt'] = dt_int[:iter+1]

#    j = 0
#    for i in range(dims):
#        {%- for s in network.required_species | sort %}
#        {{s.name}}_arr[i] = input[j] #* {{s.weight}}
#        j += 1
#        {%- endfor %}
    return rv, rv_t

cdef copy_array(double *input, double *output, int dims):
    cdef int i
    for i in range(dims):
        output[i] = input[i]

cdef floor_values(double *input, int dims, double floor):
    cdef int i
    for i in range(dims):
        if input[i] < floor:
            input[i] = floor
