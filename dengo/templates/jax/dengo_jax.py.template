
import jax
from jax import jit
import jax.numpy as jnp
import h5py

# read rates in as global variables
rates_table = 'reaction_rates.h5'
ratef = h5py.File(rates_table, 'r')
{% for k in network.reactions.keys()%}
out{{k}}dev = ratef['{{k}}'][:]
{%- endfor %}
tdev = ratef['T'][:]
ratef.close()

@jit
def interpolate_rates(T):
  """Interpolate all the reaction rates based on temperature
  """
  {% for k in network.reactions.keys()%}
  {{k}} = jnp.interp(T, tdev, out{{k}}dev)
  {%- endfor %}
  return (
  {%- for k in network.reactions.keys() -%}
  {{k}},
  {%- endfor -%}
  )

@jit
def calculate_temperature(state):
  """calculate temperature based on the N different input state

  Parameters
  ----------
  state : ndarray with shape [NSPECIES + 1, N]
    Abundances sorted by name, and the last dimension corresponds to the current check_time

  Returns
  -------
  Temperature: ndarray

  """
  # retreive the species
  {% for s in network.required_species | sort -%}
  {{s.name}},
  {%- endfor -%}
  _= state

  mh      = 1.67e-24
  kb      = 1.38e-16
  gamma   = 5./3.
  gammaH2_1 = 7./5.
  gammaH2_2 = 7./5.
  _gamma_m1 = 1./ (gamma-1.)

  density = {{network.print_mass_density()}}

  return {{network.temperature_calculation()}}



@jit
def f(state):
  """RHS function of each chemical species

  Parameters
  ----------
  state : ndarray with shape [NSPECIES + 1, N]
    Abundances sorted by name, and the last dimension corresponds to the current check_time

  Returns
  -------
  dy/dt: rate of change of each species
  """

  # retreive the species
  {% for s in network.required_species | sort -%}
  {{s.name}},
  {%- endfor -%}
  current_time= state

  # calculate temperature
  T = calculate_temperature(state)

  # interpolate the rates
  {% for k in network.reactions.keys() -%}
  {{k}},
  {%- endfor -%} = interpolate_rates(T)


  # rhs function
  {% for s in network.required_species | sort %}
  d{{s.name}} = {{rhs_dict[s]}}*jnp.ones_like(ge)
  {%- endfor %}

  return jnp.array([
  {%- for s in network.required_species | sort -%}
  d{{s.name}},
  {%- endfor -%}
  0.0*current_time
  ])

def main():
  state = (1,2,1e11)
  print(rhs(state))


from jax import partial, jit
import jax
import jax.ops as ops
import jax.numpy as jnp


# f = rhs function
@jit
def BE_resid_func(state, state0, t, dt):
  """Handy Function for calculating residual
  """
  #1. get f
  #2. calculate G = u - u0 - dt*f(u)
  print(f(state))
  return state - state0 - dt* f(state)

block_jac = jax.vmap(jax.jacobian(f) , in_axes=1, out_axes=0 )

@jit
def BE_resid_jac(state, t, dt):
  """Update the Jacobian given the state
  """
  # // update Jacobian to additionally include remaining terms,
  # //   J = I - dt*Jf(u)
  return jnp.eye(state.shape[0]) -dt* block_jac(state)

@jit
def be_chem_solve_whileloop(xold, xnew, tnow, dt):

  @jit
  def iterate_while(inputs):
    _, xnew = inputs
    batch_resid = BE_resid_func(xnew, xold, tnow, dt)
    batch_jac   = BE_resid_jac (xnew, tnow, dt)
    # dx          = jnp.linalg.solve(batch_jac, batch_resid.T).T
    dx = jnp.linalg.solve(batch_jac, batch_resid.T).T
    return (dx, ops.index_add(xnew, ops.index[:], -dx))
  @jit
  def check_convergence(inputs, rtol=1e-8, atol = 1e-20):
    dx, xnew = inputs
    return (jnp.abs((dx)/ (rtol*xnew + atol)) > 1).all()

  dx = jnp.ones_like(xnew)*1e9
  inputs = (dx, xnew)
  return jax.lax.while_loop(check_convergence, iterate_while, inputs)

@partial(jit, static_argnums=(1,2,3,4))
def solve_chemistry_whileloop(state0, T_start, T_end, init_dt, max_steps):
  """Integrate ODE with 1st Order BDF method

  Parameters
  ----------
  state0 : ndarray with shape [NSPECIES + 1, N]
    Abundances sorted by name, and the last dimension corresponds to the current check_time
  T_start: float
    initial time
  T_end  : float
    end time
  init_dt: float
    Initial step for integration
  max_steps:
    Maximum number of steps

  Returns:
  --------
  state1 : ndarray with shape [NSPECIES + 1, N]
    Abundances at T_end
  """
  @jit
  def check_time(inputs):
    state0, dt, current_time, T_end = inputs
    return current_time < T_end

  @jit
  def evolve_onestep(inputs):
    state0, dt, current_time, T_end = inputs
    _, newstate = be_chem_solve_whileloop(state0, state0, current_time, dt)

    state0 = newstate
    dt = jnp.minimum( 1.1*dt, T_end - current_time)
    current_time += dt
    return state0, dt, current_time, T_end

  # return jax.lax.fori_loop(1, max_steps, evolve_onestep, (state0, init_dt, T_start, T_end))
  return jax.lax.while_loop(check_time, evolve_onestep, (state0, init_dt, T_start, T_end))


def rk4_whileloop(ys, T_final, init_dt, N):

  @jit
  def get_index(ys):
    t  = ys[:,-1,0]
    dt = jnp.diff(t, append=0)
    return jnp.where(dt< 0, jnp.arange(len(t)) +1 , 0).sum()


  @jit
  def step(ys):
    i = get_index(ys)
    current_time = ys[i-1,-1,-1]

    last_dt = jnp.where(i<=1, init_dt, ys[i-1,-1,-1] - ys[i-2,-1,-1])

    # last_dt = init_dt
    h = last_dt * 1.1
    t = current_time + h
    h = jnp.where( T_final - current_time > h, h, T_final - current_time)
    print(h, t, current_time)

    k1 = h * f(ys[i-1], t)
    k2 = h * f(ys[i-1] + k1/2., current_time + h/2.)
    k3 = h * f(ys[i-1] + k2/2., current_time + h/2.)
    k4 = h * f(ys[i-1] + k3,    current_time + h)

    ysi = ys[i-1] + 1./6 * (k1 + 2 * k2 + 2 * k3 + k4)
    ys = ops.index_update(ys, ops.index[i], ysi)

    ys = ops.index_update(ys, ops.index[i,-1], t)
    return ys

  @jit
  def cond_func(ys):
    t  = ys[:,-1,0]
    dt = jnp.diff(t, append=0)
    return jnp.where(dt< 0, t, 0).sum() < T_final #and jnp.isfinite(ys).all()

  return jax.lax.while_loop(cond_func, step, ys )
